@media (max-width: 900px)
{
    .pages{
        grid-template-columns: 1fr 1fr !important; /* makes the grid n x 2 rather than n x 3 */
        gap: 20px; /* each row has 20px spacing between */
        column-gap: 1px; /* each column has 1px spacing between */
    }

    .read_button {
        max-width: 200px;
    }
}

.searchbar
{
    position: fixed; /* This makes the search bar stay fixed on the screen */
    top: 85px; /* Adjust this based on your header height */
    z-index: 998; /* Ensures it's on top of other content */

    display: flex;
    align-items: center;
    justify-content: center; /* turn it into a flex-box to make sure the searchbar is centered */

    width: 100%; /* Optional: makes the search bar full-width */
    background-color: white; /* Optional: gives the search bar a background */
    padding: 15px 0; /* Adjust the vertical padding */
    
}

.bar 
{
    width: 35%; /* % is % of the parent container, in this case, the body itself so the viewport */
    height: 5vh; /* vh so x% of the viewport */

    border-radius: 999px;         /* makes it pill-shaped */
    border: 1px solid #ccc;       /* optional: subtle border */
    padding: 0 20px;              /* space inside left/right */
    font-size: 1rem;              /* make text readable */
    outline: none;                /* remove blue highlight on focus */
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.pages
{
    display: grid; /* this div is a grid display */
    grid-template-columns: auto auto auto; /* makes the grid n x 3 */
    justify-content: space-evenly; /* applies to entire grid, the columns evenly spaced between itself */
    justify-items: center; /* horizontally centers items in cell */
    align-items: center; /* vertically centers items in cell */

    margin-top: 170px;

    row-gap: 20px;
}

.read_button
{
    cursor: pointer;
    
    text-decoration: none;

    position: relative; /* makes this work with position: absolute */
    /* relative container [absolute child] */
    width: 350px;
    height: 250px;
    overflow: hidden; /* anything that goes beyond the parent container gets cut off */
    /* read_button container [img overlay [title read now]] */
    /* anything from img, overlay and title, read now will be cut off if it spills out of read_button */ 
}

.overlay
{
    position: absolute;
    bottom: 0;
    left: 0;
    /* start the overlay from the bottom left */
    /* position goes to the bottom left of the relative container */

    width: 100%;
    height: 100%;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.6), transparent);
    color: white;
    transition: 0.3s;
}

.read_button img
{
    width: 100%;
    height: 100%;
    object-fit: cover; /* maintain aspect ratio, if it doesn't fit, crop it */
    object-position: center;
}

.title 
{
    position: absolute;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 10px 10px;
    font-size: 30px;
    width: 100%;
    bottom: 0;
    left: 0;
}

.readnow 
{
    position: absolute; 
    top: 35%;
    left: 50%;
    opacity: 0;
    font-weight: bold;
    font-size: 30px;
    transition: 0.3s;

    transform: translate(-50%, -50%); /* centers it */ 
}

/* Hover effect */
.read_button:hover img {
    opacity: 0.4;
}

.read_button:hover .readnow {
    opacity: 1;
}

.read_button:hover .title
{
    opacity: 0;
}